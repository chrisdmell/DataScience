library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
x <- 1:4
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
x
p
sum(x)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
':=' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = fucntion (){
a = 1
b = 3
c = 4
return (a,b,c)
}
testfunc = fucntion (){
a = 1
b = 3
c = 4
return (list(a,b,c))
}
testfunc = fucntion (){
a = 1
b = 3
c = 4
return (list(a,b,c))
}
testfunc = fucntion ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) := testfunc ()
x
y
y
install.packages("fs")
is_file("/home/LearningR")
library(fs)
is_file("/home/LearningR")
is_file("C:\Users\user\Documents\repository")
is_file("~\Documents\repository")
is_file("~\repository")
is_file("~\repository\Meaningfulclassespart2.R")
is_file("~\Meaningfulclassespart2.R")
is_file("~\meaningfulclassespart2.R")
file.exists("/home/LearningR")
file.exists("/home/repository/Meaningfulclassespart2.R")
file.exists("/home/repository\Meaningfulclassespart2.R")
file.exists("/home/repository/Meaningfulclassespart2.R")
is_file("C:\\Users\\user\\Documents\\repository")
is_file("C:\\Users\\user\\Documents\\repository\\Meaningfulclassespart2.R")
print ( hi , a)
a = is_file("C:\\Users\\user\\Documents\\repository\\Meaningfulclassespart2.R")
print ( hi , a)
print ( "hi"" , a)
print ( "hi" , a)
print paste0(( "hi" , a))
print() paste0( "hi" , a))
print( paste0( "hi" , a))
a
typeof(a)
file_checker = function (location)
{
a = is_file (location)
print ( paste0 ("File present at ", a ))
}
file_checker (a1)
a1 = "C:/Users/user/Documents/repository/Meaningfulclassespart2.R"
file_checker (a1)
file_checker = function (location)
{
a = is_file (location)
print ( paste0 ("File present at ", location, a ))
}
a1 = "C:/Users/user/Documents/repository/Meaningfulclassespart2.R"
file_checker (a1)
file_checker = function (location)
{
a = is_file (location)
print ( paste0 ("File present at ", location," ",  a ))
}
a1 = "C:/Users/user/Documents/repository/Meaningfulclassespart2.R"
file_checker (a1)
file_checker = function (location)
{
a = is_file (location)
print ( paste0 ("File present at ", location," =  ",  a ))
}
a1 = "C:/Users/user/Documents/repository/Meaningfulclassespart2.R"
file_checker (a1)
'===' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) === testfunc ()
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) === testfunc ()
'===' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) === testfunc ()
'===' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) === testfunc ()
'===' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) === testfunc ()
':=' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) := testfunc ()
':==' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) :== testfunc ()
':==' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`==`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`==`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) :== testfunc ()
source('C:/Users/user/Downloads/Data-Prep (1).R', echo=TRUE)
library(lubridate)
install.packages("lubridate")
library(lubridate)
pnorm(-1, mean = 0, sd = )
pnorm(-1, mean = 0, sd = 1)
pnorm(-1, mean = 0, sd = )
pnorm(-1, mean = 0 )
pnorm(1, mean = 0 )
pnorm(1800, mean = 1500, sd = 300)
pnorm(24, 21, 5)
?qnorm
qnorm(.90, 1500, 300)
qnorm(.10, 1500, 300)
qnorm(.10, 21, 5)
library(ggplot2)
library(dplyr)
load("brfss2013.RData")
heights = list(brfss2013$height3)
mapping <- function(x)  {
x = as.character(x)
sep = ""
x = paste(substring(x, 1,1), ".", substring(heights[1],2), sep=sep, collapse=sep)
return(x)
}
mapping(heights[1])
heights[1]
heights[1][1]
heights[1][1][1]
heights
heights
#########################################33
#solving getting in ft and inches
heights = as.list(brfss2013$height3)
heights[1]
heights[2]
mapping(heights[1])
new_height = lapply(heights, mapping)
new_height
new_height[1]
new_height = as.integer(new_height)
#########################################33
#solving getting in ft and inches
heights = na.omit(as.list(brfss2013$height3))
mapping(heights[1])
new_height = lapply(heights, mapping)
new_height = as.integer(new_height)
new_height
new_height = lapply(heights, mapping)
new_height_1 = as.numeric(new_height)
new_height_1
hist(new_height_1 )
hist(new_height_1 , breaks = 100)
new_height_2 = new_height_1 * 30.48
new_height_2
hist(new_height_1 , breaks = 100)
hist(new_height_2 , breaks = 100)
summary(new_height_2)
new_height_3 = lapply(new_height_2, function(x) x[!is.na(x)])
table(new_height_3)
table(new_height_2)
table(heights)
table(new_height)
table(new_height_1)
#############################33
table(brfss2013$weight2)
brfss2013$weight2
brfss2013$weight2 == 9270
brfss2013[brfss2013$weight2 == 9270]
brfss2013[,brfss2013$weight2 == 9270]
brfss2013[brfss2013$weight2 == 9270,]
x = brfss2013[brfss2013$weight2 == 9270,]
x$weight2
hist(brfss2013$weight2)
hist(as.numeric(brfss2013$weight2))
hist(as.numeric(brfss2013$weight2), breaks = 100)
hist(as.numeric(brfss2013$weight2), breaks = 1000)
hist(as.numeric(brfss2013$weight2), breaks = 500)
hist(as.numeric(brfss2013$weight2), breaks = 500, xlim = c(0, 300))
hist(as.numeric(brfss2013$weight2), breaks = 500, xlim = c(0, 200))
box(lty = '1373', col = 'red')
ggplot(data = brfss2013, aes(x = weight2)) +
geom_histogram(binwidth = 15)
ggplot(data = brfss2013, aes(x = weight2)) +
geom_histogram()
ggplot(data = brfss2013, aes(x = brfss2013$weight2)) +
geom_histogram()
gplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram()
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram()
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram() +
geom_density(col=2)
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram() +
geom_density(col=200)
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram( aes(y =..density..),     breaks=seq(20, 50, by = 2),
col="red",
fill="green",
alpha=.2) +
geom_density(col=200)
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram()
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram(bins = 30)
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram(bins = 300)
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram(bins = 150)
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram( aes(y =..density..),     breaks=seq(20, 50, by = 2),
col="red",
fill="green",
alpha=.2, bins = 150) +
geom_density(col=200)
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram( aes(y =..density..),     breaks=seq(20, 50, by = 2),
col="red",
fill="red",
alpha=.2, bins = 150) +
geom_density(col=200)
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram( aes(y =..density..),     breaks=seq(20, 50, by = 2),
col="red",
fill="green",
alpha=.2, bins = 150) +
geom_density(col=200)
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram( aes(y =..density..),     breaks=seq(20, 50, by = 2),
col="red",
fill="green",
alpha=.2, bins = 150) +
geom_density(col=100)
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram( aes(y =..density..),     breaks=seq(20, 50, by = 2),
col="red",
fill="green",
alpha=.2, bins = 150) +
geom_density(col=1000)
ggplot(data = brfss2013, aes(x = as.numeric(brfss2013$weight2))) +
geom_histogram( aes(y =..density..),     breaks=seq(20, 50, by = 2),
col="red",
fill="green",
alpha=.2, bins = 150) +
geom_density(col=100)
x = brfss2013[brfss2013$weight2 == 0]
nrow(x)
x = brfss2013[brfss2013$weight2 == 100]
x = brfss2013[brfss2013$weight2 == 100]
x = brfss2013[brfss2013$weight2 == 101]
x = brfss2013[brfss2013$weight2 == 1]
nrow(x)
x = brfss2013[brfss2013$weight2 == 1]
nrow(x)
x = brfss2013[brfss2013$weight2 == 0]
nrow(x)
x = brfss2013[brfss2013$weight2 == 0, ]
nrow(x)
x = brfss2013[,brfss2013$weight2 == 1]
nrow(x)
install.packages("MASS")
customer.date = read.csv("dummy_dataset_clustering.csv")
setwd("C:\Users\user\Documents\DataScience\LunchNLearn\20181121")
setwd("C:\\Users\\user\\Documents\\DataScience\\LunchNLearn\\20181121")
customer.date = read.csv("dummy_dataset_clustering.csv")
View(customer.date)
install.packages("MASS")
library(MASS)
View(customer.date)
cluster.data = customer.date[, -c(1,2,3,4,6,7,17,19)]
View(cluster.data)
#cluster
group.1 = kmeans(cluster.data, centers = 3)
# assignmenbers
cluster.data$ groups = group.1$cluster
group.1$size
group.1$centers
out.discr.1 = lda(groups~., data = cluster.data)
out.discr.1$scaling
customer.date.scalled = as.data.frame(scale(cluster.data))
group.2 = kmeans(cluster.data, centers = 3)
groups.2$size
group.2$size
plot(out.discr.1)
