library("KernSmooth", lib.loc="C:/Program Files/R/R-3.5.1/library")
---
title: "StatisticalInferrance_1"
author: "ChrisAloysiusDmello"
date: "14 September 2018"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
hist(galton$parent,col="blue",breaks=100)
?galton
data(galton)
library(UsingR); data(galton)
### Find the center of mass of the bars
```{r galton, fig.height=6,fig.width=12, fig.align='center', echo = FALSE, message =FALSE, warning=FALSE}
library(UsingR); data(galton); library(ggplot2)
library(reshape2)
longGalton <- melt(galton, measure.vars = c("child", "parent"))
g <- ggplot(longGalton, aes(x = value)) + geom_histogram(aes(y = ..density..,  fill = variable), binwidth=1, colour = "black") + geom_density(size = 2)
g <- g + facet_grid(. ~ variable)
g
```
install.packages("UsingR")
## Expected Values
- Expected values are useful for charactering a distribution
## Expected values
- Expected values are useful cor characterizing a distribution
- The mean is a characterization of its center
- The variance and standard deviation are characterizations of
how spr
## Expected values
- Expected values are useful cor characterizing a distribution
- The mean is a characterization of its center
- The variance and standard deviation are characterizations of
how spr
---
## Expected Values
- Expected values are useful for charactering a distribution
---
---
## Expected Values
- Expected values are useful for charactering a distribution
---
---
title       : Expected values
subtitle    : Statistical Inference
author      : Brian Caffo, Jeff Leek, Roger Peng
job         : Johns Hopkins Bloomberg School of Public Health
logo        : bloomberg_shield.png
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
url:
lib: ../../librariesNew
assets: ../../assets
widgets     : [mathjax]            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
---
## Expected values
- Expected values are useful cor characterizing a distribution
- The mean is a characterization of its center
- The variance and standard deviation are characterizations of
how spread out it is
- Our sample expected values (the sample mean and variance) will
estimate the population versions
---
```{r galton, fig.height=6,fig.width=12, fig.align='center', echo = FALSE, message =FALSE, warning=FALSE}
```{r galton, fig.height=6,fig.width=12, fig.align='center', echo = FALSE, message =FALSE, warning=FALSE}
library(UsingR); data(galton); library(ggplot2)
library(reshape2)
longGalton <- melt(galton, measure.vars = c("child", "parent"))
g <- ggplot(longGalton, aes(x = value)) + geom_histogram(aes(y = ..density..,  fill = variable), binwidth=1, colour = "black") + geom_density(size = 2)
g <- g + facet_grid(. ~ variable)
g
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("manipulate")
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
x <- 1:4
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
x
p
sum(x)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
':=' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = fucntion (){
a = 1
b = 3
c = 4
return (a,b,c)
}
testfunc = fucntion (){
a = 1
b = 3
c = 4
return (list(a,b,c))
}
testfunc = fucntion (){
a = 1
b = 3
c = 4
return (list(a,b,c))
}
testfunc = fucntion ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) := testfunc ()
x
y
y
install.packages("fs")
is_file("/home/LearningR")
library(fs)
is_file("/home/LearningR")
is_file("C:\Users\user\Documents\repository")
is_file("~\Documents\repository")
is_file("~\repository")
is_file("~\repository\Meaningfulclassespart2.R")
is_file("~\Meaningfulclassespart2.R")
is_file("~\meaningfulclassespart2.R")
file.exists("/home/LearningR")
file.exists("/home/repository/Meaningfulclassespart2.R")
file.exists("/home/repository\Meaningfulclassespart2.R")
file.exists("/home/repository/Meaningfulclassespart2.R")
is_file("C:\\Users\\user\\Documents\\repository")
is_file("C:\\Users\\user\\Documents\\repository\\Meaningfulclassespart2.R")
print ( hi , a)
a = is_file("C:\\Users\\user\\Documents\\repository\\Meaningfulclassespart2.R")
print ( hi , a)
print ( "hi"" , a)
print ( "hi" , a)
print paste0(( "hi" , a))
print() paste0( "hi" , a))
print( paste0( "hi" , a))
a
typeof(a)
file_checker = function (location)
{
a = is_file (location)
print ( paste0 ("File present at ", a ))
}
file_checker (a1)
a1 = "C:/Users/user/Documents/repository/Meaningfulclassespart2.R"
file_checker (a1)
file_checker = function (location)
{
a = is_file (location)
print ( paste0 ("File present at ", location, a ))
}
a1 = "C:/Users/user/Documents/repository/Meaningfulclassespart2.R"
file_checker (a1)
file_checker = function (location)
{
a = is_file (location)
print ( paste0 ("File present at ", location," ",  a ))
}
a1 = "C:/Users/user/Documents/repository/Meaningfulclassespart2.R"
file_checker (a1)
file_checker = function (location)
{
a = is_file (location)
print ( paste0 ("File present at ", location," =  ",  a ))
}
a1 = "C:/Users/user/Documents/repository/Meaningfulclassespart2.R"
file_checker (a1)
'===' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) === testfunc ()
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) === testfunc ()
'===' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) === testfunc ()
'===' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) === testfunc ()
'===' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) === testfunc ()
':=' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) := testfunc ()
':==' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) :== testfunc ()
':==' <- function(lhs, rhs) {
frame <- parent.frame()
lhs <- as.list(substitute(lhs))
if (length(lhs) > 1)
lhs <- lhs[-1]
if (length(lhs) == 1) {
do.call(`==`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL))
}
if (is.function(rhs) || is(rhs, 'formula'))
rhs <- list(rhs)
if (length(lhs) > length(rhs))
rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`==`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL))
}
testfunc = function ()
{
a = 1
b = 3
c = 4
return (list(a,b,c))
}
c(x,y,z) :== testfunc ()
source('C:/Users/user/Downloads/Data-Prep (1).R', echo=TRUE)
library(lubridate)
install.packages("lubridate")
library(lubridate)
pnorm(-1, mean = 0, sd = )
pnorm(-1, mean = 0, sd = 1)
pnorm(-1, mean = 0, sd = )
pnorm(-1, mean = 0 )
pnorm(1, mean = 0 )
pnorm(1800, mean = 1500, sd = 300)
pnorm(24, 21, 5)
?qnorm
qnorm(.90, 1500, 300)
qnorm(.10, 1500, 300)
qnorm(.10, 21, 5)
library(readr)
library(dplyr)
library(ggplot2)
install.packages("readr")
install.packages("dplry")
install.packages("ggplot2")
library(readr)
library(dplyr)
library(ggplot2)
ratings = fread("ratings.csv")
install.packages("data.table")
library(data.table)
ratings = fread("ratings.csv")
getwd()
setwd("C:\Users\user\Documents\DataScience\RecommendationSystem")
setwd("C:\\Users\\user\\Documents\\DataScience\\RecommendationSystem")
ratings = fread("ratings.csv")
tags    = fread("tags.csv")
movies  = fread("movies.csv")
View(ratings)
user.summary = ratings %>%
group_by(userId) %>%
summarise(RatingCount = n(), MeanRating = mean(ratings), RatingSpread = max(ratings) - min(ratings))
nrow(ratings)
nrow(tags)
nrow(movies)
View(tags)
View(movies)
user
user.summary
summary(select(user.summary, -userId))
summary
summary(select(user.summary))
View(user.summary)
user.summary = ratings %>%
group_by(userId) %>%
summarise(RatingCount = n(), MeanRating = mean(ratings), RatingSpread = max(ratings) - min(ratings))
user.summary = ratings %>%
group_by(userId) %>%
summarise(RatingCount = n(), MeanRating = mean(rating), RatingSpread = max(rating) - min(rating))
summary(select(user.summary, -userId))
summary(select(user.summary  ))
summary((user.summary  ))
ggplot(user.summary) + aes(x= Ratingcount) +geom_histogram(binwidth = 50)
colnames(user.summary)
ggplot(user.summary) + aes(x= RatingCount) +geom_histogram(binwidth = 50)
